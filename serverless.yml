service:
  name: reactServerless

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-finch
  - serverless-plugin-optimize

package:
  individually: true

provider:
  name: aws
  runtime: nodejs6.10
  stage: ${opt:stage, self:custom.defaultStage}
  profile: ${self:custom.profiles.${self:provider.stage}}
  region: ap-southeast-1
  apiKeys:
    - ${self:custom.stage}-serviceKey
  environment: ${self:custom.env}

custom:
  defaultStage: dev
  stage: ${opt:stage, self:custom.defaultStage}
  profiles:
    local: serverlessDevProfile
    dev: serverlessDevProfile
    prod: serverlessProdProfile
  serverless-offline:
    port: 3001
  client:
    bucketName: ${opt:distributionFolder, self:custom.env.S3_BUCKET_NAME}
    distributionFolder: ${opt:distributionFolder, 'client/site/build'}
  env: ${file(./env-${self:custom.stage}.yml)}

functions:
  servicePing:
    handler: src/app/handlers/services.ping
    description: Service online availability test
    events:
      - http:
          path: services/ping
          method: get
          private: true
          cors: true
  cognitoCustomMessage:
      handler: src/app/handlers/awsCognito.customMessage
      description: Cognito user signup custom message trigger lambda function
      events:
        - cognitoUserPool:
            pool: ${self:custom.env.COGNITO_USER_POOL_NAME}
            trigger: CustomMessage
  billingCreateCharge:
      handler: src/app/handlers/billing.createCharge
      description: Stripe create new charge
      events:
        - http:
            path: billing/charge
            method: post
            private: true
            cors: true

resources:
  Resources:
    CognitoUserPool:
      Type: "AWS::Cognito::UserPool"
      Properties:
        UserPoolName: ${self:custom.env.COGNITO_USER_POOL_NAME}
        EmailConfiguration:
          ReplyToEmailAddress: ${self:custom.env.SES_MAIL_REPLY_TO}
        Schema:
          - AttributeDataType: String
            Mutable: True
            Name: email
            Required: True
        Policies:
          PasswordPolicy:
            MinimumLength: 6
            RequireLowercase: False
            RequireNumbers: False
            RequireSymbols: False
            RequireUppercase: False
    CognitoUserPoolClientWebapp:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        ClientName: ${self:custom.env.COGNITO_USER_POOL_CLIENT_NAME_WEBAPP}
        UserPoolId:
          Ref: CognitoUserPool
        WriteAttributes:
          - email
          - family_name
          - given_name
          - phone_number